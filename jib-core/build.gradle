plugins {
  id 'java-library'
  id 'checkstyle'
  id 'com.github.sherter.google-java-format' version '0.8'
  id 'net.ltgt.apt' version '0.19'
  id 'net.ltgt.errorprone' version '0.6'
  id 'biz.aQute.bnd.builder' version '4.0.0'

  // For release.
  id 'maven'
  id 'net.researchgate.release' version '2.7.0'
}

group 'com.google.cloud.tools'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11
compileJava.options.encoding = 'UTF-8'

repositories {
  flatDir {
    dirs 'mockito-libs' // to load Mockito 2.23.17 built locally from source
  }
  mavenCentral()
}

sourceSets {
  integrationTest {
    java.srcDir file('src/integration-test/java')
    resources.srcDir file('src/integration-test/resources')
  }
}

configurations {
  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
  // Make sure these are consistent with jib-maven-plugin.
  implementation 'com.google.http-client:google-http-client:1.27.0'
  implementation 'org.apache.commons:commons-compress:1.18'
  implementation 'com.google.guava:guava:23.5-jre'
  implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.8'
  implementation 'org.javassist:javassist:3.24.1-GA'

  testImplementation 'junit:junit:4.12'
  testImplementation 'org.slf4j:slf4j-api:1.7.25'

  // 2.23.17 manually compiled from source. The JAR is at
  // mockito-libs/mockito-core-2.23.17.jar.
  testImplementation 'org.mockito:mockito-core:2.23.17'
  // I had to add these three when using mockito as an unnamed module.
  // https://github.com/mockito/mockito/issues/1483#issuecomment-454889589
  testImplementation 'net.bytebuddy:byte-buddy:1.9.7'
  testImplementation 'net.bytebuddy:byte-buddy-agent:1.9.7'
  testImplementation 'org.objenesis:objenesis:3.0.1'

  // NullAway errorprone plugin
  annotationProcessor 'com.uber.nullaway:nullaway:0.6.4'
  errorprone 'com.google.errorprone:error_prone_core:2.3.2'
  // Using github.com/google/error-prone-javac is required when running on
  // JDK 8. Remove when migrating to JDK 11.
  if (System.getProperty("java.version").startsWith("1.8.")) {
    errorproneJavac("com.google.errorprone:javac:9+181-r4173-1")
  }

  integrationTestCompile sourceSets.main.output
  integrationTestCompile sourceSets.test.output
  integrationTestCompile configurations.compile
  integrationTestCompile configurations.testCompile
  integrationTestCompile configurations.runtime
  integrationTestCompile configurations.testRuntime
}

ext.moduleName = 'com.google.cloud.tools.jib'

compileJava {
  doFirst {
    options.compilerArgs = ['--module-path', classpath.asPath]
    classpath = files() // Clear the classpath. (Using --module-path instead.)
  }
}

javadoc {
  doFirst {
    options.addStringOption('-module-path', classpath.asPath)
    classpath = files() // Clear the classpath. (Using --module-path instead.)
  }
}

compileTestJava {
  inputs.property("moduleName", moduleName)
  doFirst {
    options.compilerArgs = [
        '--module-path', classpath.asPath,
        '--add-modules', 'junit',
        '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
    ]
    classpath = files() // Clear the classpath. (Using --module-path instead.)
  }
}

test {
  inputs.property("moduleName", moduleName)
  doFirst {
    jvmArgs = [
        // For now, have Mockito as an unnamed module.
        '--module-path', classpath.minus(files('mockito-libs/mockito-core-2.23.17.jar')).asPath,
        '--add-modules', 'ALL-MODULE-PATH',
        '--add-reads', "$moduleName=junit",
        '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath,

        // Try to open or export whenever running the test complains. Need to clean up or find a proper way.

        // ALL-UNNAMED probabaly not needed when having Mockito as a module
        '--add-opens', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.api=junit,org.mockito,ALL-UNNAMED',
        '--add-opens', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.frontend=junit,org.mockito,ALL-UNNAMED',
        '--add-opens', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.blob=junit,org.mockito,ALL-UNNAMED',
        '--add-opens', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.filesystem=junit,org.mockito,ALL-UNNAMED',
        '--add-opens', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.configuration=junit,org.mockito,ALL-UNNAMED',
        '--add-opens', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.configuration.credentials=junit,org.mockito,ALL-UNNAMED',
        '--add-opens', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.http=junit,org.mockito,ALL-UNNAMED',
        '--add-opens', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.hash=junit,org.mockito,ALL-UNNAMED',
        '--add-opens', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.cache=junit,org.mockito,ALL-UNNAMED',
        '--add-opens', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.image=junit,org.mockito,ALL-UNNAMED',
        '--add-opens', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.image.json=junit,org.mockito,ALL-UNNAMED',
        '--add-opens', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.tar=junit,org.mockito,ALL-UNNAMED',
        '--add-opens', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.docker=junit,org.mockito,ALL-UNNAMED',
        '--add-opens', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.docker.json=junit,org.mockito,ALL-UNNAMED',
        '--add-opens', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.registry=junit,org.mockito,ALL-UNNAMED',
        '--add-opens', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.registry.credentials=junit,org.mockito,ALL-UNNAMED',
        '--add-opens', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.global=junit,org.mockito,ALL-UNNAMED',
        '--add-opens', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.json=junit,org.mockito,ALL-UNNAMED',
        '--add-opens', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib=junit,org.mockito,ALL-UNNAMED',
        '--add-opens', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.builder=junit,org.mockito,ALL-UNNAMED',
        '--add-opens', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.builder.steps=junit,org.mockito,ALL-UNNAMED',
        '--add-opens', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.event=junit,org.mockito,ALL-UNNAMED',
        '--add-opens', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.event.events=junit,org.mockito,ALL-UNNAMED',
        '--add-opens', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.event.progress=junit,org.mockito,ALL-UNNAMED',

        '--add-exports', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.api=junit,org.mockito',
        '--add-exports', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.frontend=junit,org.mockito',
        '--add-exports', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.blob=junit,org.mockito',
        '--add-exports', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.configuration=junit,org.mockito',
        '--add-exports', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.configuration.credentials=junit,org.mockito',
        '--add-exports', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.http=junit,org.mockito',
        '--add-exports', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.hash=junit,org.mockito',
        '--add-exports', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.cache=junit,org.mockito',
        '--add-exports', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.image=junit,org.mockito',
        '--add-exports', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.image.json=junit,org.mockito',
        '--add-exports', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.tar=junit,org.mockito',
        '--add-exports', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.docker=junit,org.mockito',
        '--add-exports', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.docker.json=junit,org.mockito',
        '--add-exports', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.registry=junit,org.mockito',
        '--add-exports', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.registry.credentials=junit,org.mockito',
        '--add-exports', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.global=junit,org.mockito',
        '--add-exports', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.json=junit,org.mockito',
        '--add-exports', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib=junit,org.mockito',
        '--add-exports', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.builder=junit,org.mockito',
        '--add-exports', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.builder.steps=junit,org.mockito',
        '--add-exports', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.event=junit,org.mockito',
        '--add-exports', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.event.events=junit,org.mockito',
        '--add-exports', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.event.progress=junit,org.mockito',

        // for the com.fasterxml.jackson.databind module
        '--add-exports', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.registry.credentials.json=com.fasterxml.jackson.databind',
        '--add-exports', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.registry.json=com.fasterxml.jackson.databind',
        '--add-opens', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.cache=com.fasterxml.jackson.databind',
        '--add-opens', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.docker.json=com.fasterxml.jackson.databind',
        '--add-opens', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.image.json=com.fasterxml.jackson.databind',
        '--add-opens', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.json=com.fasterxml.jackson.databind',
        '--add-opens', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.registry.credentials.json=com.fasterxml.jackson.databind',
        '--add-opens', 'com.google.cloud.tools.jib/com.google.cloud.tools.jib.registry.json=com.fasterxml.jackson.databind',
    ]

    // With the new resource encapsulation rules with Java modules,
    // (https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Module.html#getResourceAsStream(java.lang.String)
    // many "ClassLoader.getResource()" calls in our test code running in an unnamed module (Gradle
    // test runner) will not be able to access resources. Below sets the classpath to the test
    // resource output directory as a simple workaround. (If we did not have "getResource()", we
    // would clear the classpath instead.) Should reconsider this when the Gradle test runner is
    // fully modularized or we find a better solution.
    classpath = files(sourceSets.test.output.resourcesDir,
        'mockito-libs/mockito-core-2.23.17.jar') // For now, have Mockito as an unnamed module.
  }
}

jar {
  manifest {
    attributes 'Implementation-Version': version

    // OSGi metadata
    attributes 'Bundle-SymbolicName': 'com.google.cloud.tools.jib'
    attributes 'Bundle-Name': 'Jib library for building Docker and OCI images'
    attributes 'Bundle-Vendor': 'Google LLC'
    attributes 'Bundle-DocURL': 'https://github.com/GoogleContainerTools/jib'
    attributes 'Bundle-License': 'https://www.apache.org/licenses/LICENSE-2.0'
    attributes 'Export-Package': 'com.google.cloud.tools.jib.*'
  }
}

// Integration tests must be run explicitly
task integrationTest(type: Test) {
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  systemProperty '_JIB_DISABLE_USER_AGENT', true
}
integrationTest.dependsOn test

test {
  testLogging {
    showStandardStreams = true
    exceptionFormat = 'full'
  }
}

import net.ltgt.gradle.errorprone.CheckSeverity

// Adds NullAway errorprone checks.
tasks.withType(JavaCompile) {
  if (!name.toLowerCase().contains("test")) {
    options.errorprone {
      check('NullAway', CheckSeverity.ERROR)
      option('NullAway:AnnotatedPackages', 'com.google.cloud.tools')
    }
  }
}

// Fail build on javadoc warnings
tasks.withType(Javadoc) {
  options.addBooleanOption('Xwerror', true)
}
assemble.dependsOn javadoc

tasks.withType(Test) {
  reports.html.setDestination file("${reporting.baseDir}/${name}")
}

/* GOOGLE JAVA FORMAT */
googleJavaFormat {
  toolVersion = '1.6'
}
check.dependsOn verifyGoogleJavaFormat
/* GOOGLE JAVA FORMAT */

/* CHECKSTYLE */
checkstyle {
  toolVersion = '8.15'

  // get the google_checks.xml file from the checkstyle jar and take out the java checks
  def googleChecks = resources.text.fromArchiveEntry(configurations.checkstyle[0], 'google_checks.xml').asString()
  def fileExtensionsBefore = '<property name="fileExtensions" value="java, properties, xml"/>'
  def fileExtensionsAfter = '<property name="fileExtensions" value="properties, xml"/>'
  def googleChecksNoJava = googleChecks.replace(fileExtensionsBefore, fileExtensionsAfter)
  assert !googleChecks.equals(googleChecksNoJava)

  config = resources.text.fromString(googleChecksNoJava)

  maxErrors = 0
  maxWarnings = 0
}
/* CHECKSTYLE */

/* RELEASE */
task sourceJar(type: Jar) {
  from sourceSets.main.allJava
  classifier 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  from javadoc.destinationDir
  classifier 'javadoc'
}

task writePom {
  project.afterEvaluate {
    def outputFile = file("${project.buildDir}/pom/${project.name}-${project.version}.pom")
    outputs.file outputFile

    doLast {
      pom {
        project {
          name 'Jib Core'
          description 'Build container images.'
          url 'https://github.com/GoogleContainerTools/jib'
          inceptionYear '2018'

          scm {
            url 'https://github.com/GoogleContainerTools/jib'
            connection 'scm:https://github.com/GoogleContainerTools/jib.git'
            developerConnection 'scm:git://github.com/GoogleContainerTools/jib.git'
          }

          licenses {
            license {
              name 'The Apache Software License, Version 2.0'
              url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
              distribution 'repo'
            }
          }

          developers {
            developer {
              id 'coollog'
              name 'Qingyang Chen'
              email 'qingyangc@google.com'
            }
            developer {
              id 'loosebazooka'
              name 'Appu Goundan'
              email 'appu@google.com'
            }
            developer {
              id 'TadCordle'
              name 'Tad Cordle'
              email 'tcordle@google.com'
            }
            developer {
              id 'chanseokoh'
              name 'Chanseok Oh'
              email 'chanseok@google.com'
            }
            developer {
              id 'briandealwis'
              name 'Brian de Alwis'
              email 'bdealwis@google.com'
            }
          }
        }
      }.writeTo(outputFile)
    }
  }
}

// For Kokoro sign and releases
task prepareRelease(type: Copy) {
  from jar
  from sourceJar
  from javadocJar
  from writePom
  into "${project.buildDir}/release-artifacts"
  dependsOn build
  dependsOn cleanPrepareRelease
}
// Release plugin (git release commits and version updates)
release {
  tagTemplate = 'v$version-core'
  git {
    requireBranch = /^core_release_v\d+.*$/  //regex
  }
}
/* RELEASE */
